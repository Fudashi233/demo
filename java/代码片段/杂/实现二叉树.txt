import java.util.LinkedList;
public class Tree<T>///////
{
	private Node<T> root;
	public Tree(T t)
	{
		root=new Node<T>(t);
	}
	public Node<T> LInsert(Node<T> root,T data)
	{
		if(root!=null)
		{
			Node<T> current=new Node<T>(data);
			current.left=root.left;
			root.left=current;
			return current;
		}
		return null;
	}
	public Node<T> RInsert(Node<T> root,T data)
	{
		if(root!=null)
		{
			Node<T> current=new Node<T>(data);
			current.right=root.right;
			root.right=current;
			return current;
		}
		return null;
	}
	public T LDelete(Node<T> root)
	{
		if(root!=null)
		{
			T result=root.left.data;
		    root.left=null;
		    return result;
		}
		return null;
	}
	public T RDelete(Node<T> root)
	{
		if(root!=null)
		{
			T result=root.right.data;
		    root.right=null;
		    return result;
		}
		return null;
	}
	public void destory(Node<T> root)
	{
		if(root!=null)
		{
			root.left=null;
			root.right=null;
		}
	}
	public int getSize(Node<T> root)
	{
		if(root==null)
			return 0;
		return getSize(root.left)+getSize(root.right)+1;//如果二叉树不为空，二叉树节点个数 = 左子树节点个数 + 右子树节点个数 + 1
	}
	public void Order(Node<T> root)
	{
		if(root!=null)
		{
			size++;
			Order(root.left);
			Order(root.right);
	    }
		
	}
	public int getHeight(Node<T> root)
	{
		int lHeight, rHeight;  
        if(root==null) 
            return 0;  
        lHeight = getHeight(root.left) + 1;  
        rHeight = getHeight(root.right) + 1;   
        return (lHeight > rHeight ? lHeight : rHeight);  
	}
	public void inOrder(Node<T> root)
	{
		if(root!=null)
		{
			inOrder(root.left);
			System.out.print(root.data+"\t");
			inOrder(root.right);
		}
	}
	public void preOrder(Node<T> root)
	{
		if(root!=null)
		{
			System.out.print(root.data+"\t");
			preOrder(root.left);
			preOrder(root.right);
		}
	}
	public void postOrder(Node<T> root)
	{
		if(root!=null)
		{
			postOrder(root.left);
			postOrder(root.right);
			System.out.print(root.data+"\t");
		}
	}
	public void paintTree(Node<T> root,int n)
	{
		if(root==null)
			return ;
		if(root.right!=null)
			paintTree(root.right,n+1);
		for(int i=0;i<n;i++)
			System.out.print("   ");
		System.out.println("---"+root.data);
		if(root.left!=null)
			paintTree(root.left,n+1);
	}
	public Node<T> getRoot()
	{
		return root;
	}
	public  boolean isCompleteTree(Node<T> root)
	{
		if(root==null)
			return false;
		boolean noChild=false;
		boolean result=true;
		Queue<Node<T>> queue=new Queue<Node<T>>();
		queue.push(root);
		while(!queue.isEmpty())
		{
			Node<T> temp=queue.pop();
			if(noChild)
			{
		        if(temp.left!=null||temp.right!=null)
				{
					result=false;
					break;
				}
			}
			if(temp.left!=null&&temp.right!=null)
			{
				queue.push(temp.left);
				queue.push(temp.right);
			}
			else if(temp.left==null&&temp.right==null)
			{
				noChild=true;
			}
			else if(temp.left==null&&temp.right!=null)
			{
				result=false;
				break;
			}
			else if(temp.left!=null&&temp.right==null)
			{
				noChild=true;
				queue.push(temp.left);
			}
		}
		return result;
	}
	public static void main(String[] args)
	{
		Tree<Character> tree=new Tree<Character>('A');
		Node<Character> current=tree.root;
		current=tree.LInsert(current,'B');
		tree.LInsert(current,'C');
		current=tree.RInsert(current,'D');
		tree.RInsert(current,'E');
		current=tree.root;
		current=tree.RInsert(current,'F');
		tree.LInsert(current,'G');
		current=tree.RInsert(current,'H');
		tree.LInsert(current,'I');
		tree.paintTree(tree.getRoot(),0);
		System.out.println(tree.getHeight(tree.getRoot()));	
		System.out.println(tree.isCompleteTree(tree.getRoot()));
	}
}
class Node<T>
{
	public T data;
	public Node<T> left;
	public Node<T> right;
	public Node()
	{
		data=null;
		left=null;
		right=null;
	}
	public Node(T t)
	{
		data=t;
		left=null;
		right=null;
	}
}
class Queue<T>
{
	private LinkedList<T> queue;
	public Queue()
	{
		queue=new LinkedList<T>();
	}
	public void push(T t)
	{
		queue.addLast(t);
	}
	public T peek()
	{
		return queue.getFirst();
	}
	public T pop()
	{
		return queue.removeFirst();
	}
	public boolean isEmpty()
	{
		return queue.size()==0;
	}
}




