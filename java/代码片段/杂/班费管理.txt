import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JApplet;
import javax.swing.JTable;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.JTextArea;
import javax.swing.JScrollPane;
import javax.swing.JOptionPane;
import javax.swing.JCheckBox;
import javax.swing.ListSelectionModel ;
import javax.swing.JTextField;

import javax.swing.table.TableColumn;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.util.Vector;

public class Test extends JApplet
{
    private JButton add;
    private JButton remove;
	private JButton sort;
	private JLabel money;
	private JTable table;
	private JTextArea text;
	private MyTableModel tableModel;
	private JTextField figure;
    private String[] columnNames={"Name","Domitory","IsPay"};
    private Object[][] data={
		                        {"asd","1-111",false},
									{"zxc","1-111",false},
										{"dfg","1-110",false},
											{"vsa","1-110",false},
												{"cvf","1-112",false}
							};
	public Test()
	{
		add=new JButton("Add student");
		remove=new JButton("Remove student");
		sort=new JButton("Sort table");
		money=new JLabel("Total money",SwingConstants.CENTER);
		figure=new JTextField("0",5);
		tableModel=new MyTableModel(data,columnNames);
		table=new JTable(tableModel);
		//table.setRowSelectionAllowed(true);
		//table.setColumnSelectionAllowed(true);
		
		text=new JTextArea();
		text.setLineWrap(true);
		text.setWrapStyleWord(true);
		text.setEditable(false);
		text.setRows(10);
		
		setUI();
		addListener();
	}
	public void setUI()
	{	
	    JPanel p1=new JPanel(new FlowLayout(FlowLayout.CENTER,5,0));
		p1.add(add);
		p1.add(remove);
		p1.add(sort);
		p1.add(money);
		p1.add(figure);
		
		this.add(p1,BorderLayout.NORTH);
		this.add(new JScrollPane(table),BorderLayout.CENTER);
		this.add(new JScrollPane(text),BorderLayout.SOUTH);
	}
	public void addListener()
	{
		add.addActionListener(
		                            new ActionListener()
									{
										public void actionPerformed(ActionEvent e)
										{
											if(table.getSelectedRow()<=0)
											{
												tableModel.addRow(new Vector());
												text.append("Add a row to the last\n");
											}
											else 
											{
												tableModel.insertRow(table.getSelectedRow(),new Vector());
												text.append("Add a row to"+(table.getSelectedRow()+1)+"\n");
											}
										}
									}
		                     );
	    remove.addActionListener(
		                                new ActionListener()
										{
											public void actionPerformed(ActionEvent e)
											{
												if(table.getSelectedRow()>=0)
												{
													tableModel.removeRow(table.getSelectedRow());
													text.append("Remove a "+(table.getSelectedRow()+1)+"row\n");
												}
												else 
													text.append("Please selected row\n");
											}
										}
		                        );
		sort.addActionListener(
		                            new ActionListener()
									{
										public void actionPerformed(ActionEvent e)
										{
											int i=0,j=0;
											for(i=0;i<table.getRowCount()-1;i++)
											{
												for(j=i+1;j<table.getRowCount();j++)
												{
												
													String s1=table.getValueAt(i,1).toString();
													String s2=table.getValueAt(j,1).toString();
													if(s1.compareTo(s2)>0)
													{
														TableColumnModel columnModel=table.getColumnModel();
														TableColumn IColumn=columnModel.getColumn(i);
														TableColumn JColumn=columnModel.getColumn(j);
														TableColumn tempColumn=IColumn;
														IColumn=JColumn;
														JColumn=tempColumn;
													}
													System.out.println(""+i+"--"+j+" "+table.getRowCount());
												}
											}
										}
									}
		                      );
		
		table.addMouseListener(
		                            new MouseAdapter()
									{
										public void mouseClicked(MouseEvent e)
										{
											int r=table.getSelectedRow();
											int c=table.getSelectedColumn();
											String isPay=table.getValueAt(r,c).toString();
											System.out.println(""+r+"-"+c);
											if(isPay.equals("true"))
											{
												text.append(table.getValueAt(r,0).toString()+" is pay\n");
												int m=Integer.parseInt(figure.getText());
												m+=20;
												figure.setText(""+m);
											}
											if(isPay.equals("false"))
											{
												text.append(table.getValueAt(r,0).toString()+" return money\n");
												int m=Integer.parseInt(figure.getText());
												m-=20;
												figure.setText(""+m);
											}
											
										}
									}
		                      );
		
    }
}
class MyTableModel extends DefaultTableModel
{
	public MyTableModel(Object[][] data,Object[] columnNames)
	{
		super(data,columnNames);
	}
	public Class getColumnClass(int column)
	{
		return this.getValueAt(0,column).getClass();
	}
}