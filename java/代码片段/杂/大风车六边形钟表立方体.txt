import java.awt.event.*;
import javax.swing.*;
import java.awt.Graphics;
import java.awt.Dimension;
import java.util.Scanner;
public class a
{
	public static void main(String[] args)
	{
		MyFrame frame=new MyFrame();
		frame.setSize(400,300);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.pack();
		frame.setVisible(true);
	}

}

class MyPanel extends JPanel
{
	public int degree_;
	public MyPanel()
	{
		degree_=0;
	}
	public Dimension getPreferredSize()
	{
		return new Dimension(400,350);
	}
	protected void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		int radius=(int)(getWidth()*0.4);
		int xCenter=getWidth()/2;
		int yCenter=getHeight()/2;
	    degree_+=5;
		g.fillArc(xCenter-radius,yCenter-radius,radius*2,radius*2,degree_,30);
		g.fillArc(xCenter-radius,yCenter-radius,radius*2,radius*2,degree_+90,30);
		g.fillArc(xCenter-radius,yCenter-radius,radius*2,radius*2,degree_+180,30);
		g.fillArc(xCenter-radius,yCenter-radius,radius*2,radius*2,degree_+270,30);
	}
}
class MyFrame extends JFrame
{
	private MyPanel p;
	public MyFrame()
	{
		p=new MyPanel();
		this.add(p);
		///Fit listener;
		Timer t=new Timer(60,new TimerListener());
		t.start();
	}
	class TimerListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			repaint();
		}
	}
}























import javax.swing.*;
import java.awt.GridLayout;
import java.awt.event.*;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.event.*;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.awt.Dimension;
import java.awt.Color;
public class a
{
	public static void main(String[] args)
	{
		 MyFrame frame=new MyFrame();
		 frame.pack();
		// frame.setSize(400,500);
		 frame.setLocationRelativeTo(null);
		 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		 frame.setVisible(true);
	}
}


class MyPanel extends JPanel
{
	public int hour;
	public int minute;
	public int second;
	public MyPanel(int h,int m,int s)
	{
		hour=h;
		minute=m;
		second=s;
	}
	public MyPanel()
	{
		Calendar date=new GregorianCalendar();
		hour=date.get(Calendar.HOUR);
		minute=date.get(Calendar.MINUTE);
		second=date.get(Calendar.SECOND);
	}
	protected void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		int xCenter=getWidth()/2;
		int yCenter=getHeight()/2;
		int radius=(int)(getWidth()*0.4);
		int SLength=(int)(radius*0.8);
		int MLength=(int)(radius*0.7);
		int HLength=(int)(radius*0.6);
		
		int Sx=xCenter+(int)(SLength*Math.sin((second/60.0)*Math.PI*2));
		int Sy=yCenter-(int)(SLength*Math.cos((second/60.0)*Math.PI*2));
		
		int Mx=xCenter+(int)(MLength*Math.sin((minute/60.0)*Math.PI*2));
	    int My=yCenter-(int)(MLength*Math.cos((minute/60.0)*Math.PI*2));
		System.out.println(xCenter+"---"+yCenter);
		System.out.println(Mx+"---"+My);
		
		
		int Hx=xCenter+(int)(HLength*Math.sin(((hour%12+minute/60.0)/12)*Math.PI*2));
		int Hy=yCenter-(int)(HLength*Math.cos(((hour%12+minute/60.0)/12)*Math.PI*2));
		
		g.drawString("60",xCenter,yCenter-radius);
		g.drawString("15",xCenter+radius,yCenter);
		g.drawString("30",xCenter,yCenter+radius);
		g.drawString("45",xCenter-radius,yCenter);
		g.drawOval(xCenter-radius,yCenter-radius,radius*2,radius*2);
		
		g.setColor(Color.BLACK);
		g.drawLine(xCenter,yCenter,Sx,Sy);
		
		g.setColor(Color.RED);
		g.drawLine(xCenter,yCenter,Mx,My);
		
		g.setColor(Color.YELLOW);
		g.drawLine(xCenter,yCenter,Hx,Hy);
		System.out.println("paint over");
	}
	public Dimension getPreferredSize()
	{
		return new Dimension(400,450);	
	}
}
class MyFrame extends JFrame
{
	private MyPanel p;
	private JTextField hour;
	private JTextField minute;
	private JTextField second;
	public MyFrame()
	{
		super("Windows");
		p=new MyPanel();
		
		JPanel p1=new JPanel(new FlowLayout(FlowLayout.LEFT,50,0));
		p1.add(new JLabel("Hour"));
		p1.add(hour=new JTextField(String.valueOf(p.hour)));
		p1.add(new JLabel("Minute"));
		p1.add(minute=new JTextField(String.valueOf(p.minute)));
		p1.add(new JLabel("Second"));
		p1.add(second=new JTextField(String.valueOf(p.second)));
		
		this.setLayout(new GridLayout(2,1,5,5));
		this.add(p);
		this.add(p1);
		//fit listener
		hour.addActionListener(new TextListener());
		minute.addActionListener(new TextListener());
		second.addActionListener(new TextListener());
		
	}
	class TextListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			if(e.getSource()==hour)
			{
				int h=Integer.parseInt(hour.getText());
				p.hour=h;
				repaint();
			}
			else if(e.getSource()==minute)
			{
				int m=Integer.parseInt(minute.getText());
				p.minute=m;
				repaint();
			}
			else if(e.getSource()==second)
			{
				int s=Integer.parseInt(second.getText());
				p.second=s;
				repaint();
			}
		}
	}
}
























import javax.swing.*;
import java.awt.Graphics;
public class a
{
	public static void main(String[] args)
	{
		MyFrame frame=new MyFrame();
		frame.setSize(500,450);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
}


class MyPanel extends JPanel
{
	protected void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		g.drawLine(100,100,300,100);
		g.drawLine(100,100,100,50);
		g.drawLine(100,100,50,150);
		g.drawLine(50,150,250,150);
		g.drawLine(250,150,300,100);
		g.drawLine(300,100,300,50);
		g.drawLine(250,150,250,100);
		g.drawLine(50,150,50,100);
		g.drawLine(100,50,300,50);
		g.drawLine(100,50,50,100);
		g.drawLine(50,100,250,100);
		g.drawLine(250,100,300,50);
	}
}


class MyFrame extends JFrame
{
	public MyFrame()
	{
		super("Windows");
		add(new MyPanel());
	}
}


























import javax.swing.*;
import java.awt.Graphics;
import java.awt.Color;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.awt.Font;
public class a
{
	public static void main(String[] args)
	{
		MyFrame frame=new MyFrame();
		frame.setSize(400,350);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
}

class MyPanel extends JPanel
{
	private int hour_;
	private int minute_;
	private int second_;
	public MyPanel()
	{
		Calendar time=new GregorianCalendar();
		hour_=time.get(Calendar.HOUR_OF_DAY);
		minute_=time.get(Calendar.MINUTE);
		second_=time.get(Calendar.SECOND);
	}
	public MyPanel(int h,int m,int s)
	{
		hour_=h;
		minute_=m;
		second_=s;
	}
	protected void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		int xCenter=getWidth()/2;
		int yCenter=getHeight()/2;
		int radius=(int)(getWidth()*0.4);
		int secondHandLength=(int)(radius*0.9);
		int minuteHandLength=(int)(radius*0.8);
		int hourHandLength=(int)(radius*0.7);
		Font f=new Font("Californian FB",Font.BOLD,20);
		
		int xS=(int)(xCenter+secondHandLength*Math.sin((second_/60.0)*2*Math.PI));
		int yS=(int)(yCenter-secondHandLength*Math.cos((second_/60.0)*2*Math.PI));
		
		int xM=(int)(xCenter+minuteHandLength*Math.sin((minute_/60.0)*2*Math.PI));
		int yM=(int)(yCenter-minuteHandLength*Math.cos((minute_/60.0)*2*Math.PI));
		
		int xH=(int)(xCenter+hourHandLength*Math.sin(((hour_%12+minute_/60.0)/12)*2*Math.PI));
		int yH=(int)(yCenter-hourHandLength*Math.cos(((hour_%12+minute_/60.0)/12)*2*Math.PI));
		
		g.drawOval(xCenter-radius,yCenter-radius,radius*2,radius*2);
		g.setColor(Color.RED);
		g.drawLine(xCenter,yCenter,xS,yS);
		g.setColor(Color.GREEN);
		g.drawLine(xCenter,yCenter,xM,yM);
		g.setColor(Color.BLUE);
		g.drawLine(xCenter,yCenter,xH,yH);
		g.setFont(f);
		g.drawString(hour_+":"+minute_+":"+second_,0,50);
		g.drawString("60",xCenter,yCenter-radius);
		g.drawString("15",xCenter+radius.yCenter);
		g.drawString("30",xCenter,yCenter+30);
		g.drawString("45",xCenter-rad)
		
	}
}

class MyFrame extends JFrame
{
	MyFrame()
	{
		super("Hello");	
		MyPanel p=new MyPanel();
		add(p);
		
	}
}











import javax.swing.*;
import java.awt.Graphics;
import java.awt.Color;
public class a
{
	public static void main(String[] args)
	{
		MyFrame frame=new MyFrame();
		frame.setSize(400,350);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
}
class MyPanel extends JPanel
{
	private int xCoordinate;
	private int yCoordinate;
	private int radius;
	public MyPanel()
	{
		xCoordinate=0;
		yCoordinate=0;
		radius=0;
	}	
	protected void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		xCoordinate=getWidth()/2;///////////////////////////////
		yCoordinate=getHeight()/2;
		radius=(int)(getWidth()*0.4);
		
		int increment1=(int)(radius*Math.cos(Math.PI/6));
		int increment2=(int)(radius*Math.sin(Math.PI/6));
		
		g.drawArc(xCoordinate-radius,yCoordinate-radius,radius*2,radius*2,0,30);
		g.drawLine(xCoordinate,yCoordinate,xCoordinate+radius,yCoordinate);
		g.drawLine(xCoordinate,yCoordinate,xCoordinate+increment1,yCoordinate-increment2);          //x+r*cos30  y+r*sin30;
		
		g.drawArc(xCoordinate-radius,yCoordinate-radius,radius*2,radius*2,90,30);
		g.drawLine(xCoordinate,yCoordinate,xCoordinate,yCoordinate-radius);
		g.drawLine(xCoordinate,yCoordinate,xCoordinate-increment2,yCoordinate-increment1);
		
		g.drawArc(xCoordinate-radius,yCoordinate-radius,radius*2,radius*2,180,30);
		g.drawLine(xCoordinate,yCoordinate,xCoordinate-radius,yCoordinate);
		g.drawLine(xCoordinate,yCoordinate,xCoordinate-increment1,yCoordinate+increment2);
		
		
		g.drawArc(xCoordinate-radius,yCoordinate-radius,radius*2,radius*2,270,30);
		g.drawLine(xCoordinate,yCoordinate,xCoordinate,yCoordinate+radius);
		g.drawLine(xCoordinate,yCoordinate,xCoordinate+increment2,yCoordinate+increment1);
		
	}
}
class MyFrame extends JFrame
{
	MyFrame()
	{
		super("Hello");	
		add(new MyPanel());
	}
}















import javax.swing.*;
import java.awt.Graphics;
import java.awt.Polygon;
public class a
{
	public static void main(String[] args)
	{
		MyFrame frame=new MyFrame();
		frame.setSize(400,350);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
}

class MyPanel extends JPanel
{
	protected void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		int xCenter=getWidth()/2;
		int yCenter=getHeight()/2;
		int radius=(int)(getWidth()*0.4);
		int increment1=(int)(Math.sqrt(3)*radius*0.5);
		int increment2=(int)(radius*0.5);
		
		Polygon po=new Polygon();
		
		po.addPoint(xCenter+radius,yCenter);
		po.addPoint(xCenter+increment2,yCenter-increment1);
		po.addPoint(xCenter-increment2,yCenter-increment1);
		po.addPoint(xCenter-radius,yCenter);
		po.addPoint(xCenter-increment2,yCenter+increment1);
		po.addPoint(xCenter+increment2,yCenter+increment1);
		
		g.drawPolygon(po);
	}
}

class MyFrame extends JFrame
{
	MyFrame()
	{
		super("Hello");	
		add(new MyPanel());
	}
}
























import javax.swing.JLabel;
import javax.swing.JApplet;
import javax.swing.Timer;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.BorderLayout;

import java.util.GregorianCalendar;
import java.util.Calendar;
public class Test extends JApplet implements Runnable
{
	private Clock clock;
	private JLabel label;
	//private Timer time;
	public Test()
	{
		clock=new Clock();
		label=new JLabel(clock.getTime(),SwingConstants.CENTER);
		this.add(clock,BorderLayout.CENTER);
		this.add(label,BorderLayout.SOUTH);
		//time=new Timer(100,new TimerListener());
		//time.start();
		new Thread(this).start();
	}
	/* class TimerListener implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			clock.setCurrentTime();
			repaint();
			label.setText(clock.getTime());
		}
	} */
	public void run()
	{
		try
		{
			while(true)
			{
				clock.setCurrentTime();
				repaint();
				label.setText(clock.getTime());
				Thread.sleep(1000);
			}
		}
		catch(InterruptedException ex)
		{
			System.out.println("---12   "+ex);
		}
	}
}
class Clock extends JPanel
{
	private int hour;
	private int minute;
	private int second;
	public Clock()
	{
	    this.setCurrentTime();
	}
	public Clock(int h,int m,int s)
	{
		this.hour=h;
		this.minute=m;
		this.second=s;
	}
	public int getHour()
	{
		return this.hour;
	}
	public int getMinute()
	{
		return this.minute;
	}
	public int getSecond()
	{
		return this.second;
	}
	public String getTime()
	{
		return ""+this.getHour()+":"+this.getMinute()+":"+this.getSecond();
	}
	public void setCurrentTime()
	{
		GregorianCalendar time=new GregorianCalendar();
		this.hour=time.get(Calendar.HOUR);
		this.minute=time.get(Calendar.MINUTE);
		this.second=time.get(Calendar.SECOND);
	}
	protected void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		int xCenter=this.getWidth()/2;
		int yCenter=this.getHeight()/2;
		int radius=getWidth()/4;
		int HLength=(int)(radius*0.6);
		int MLength=(int)(radius*0.7);
		int SLength=(int)(radius*0.9);
		
		int SXIncrement=(int)(SLength*Math.sin((second/60.0)*2*Math.PI));
		int SYIncrement=(int)(SLength*Math.cos((second/60.0)*2*Math.PI));
		
		int MXIncrement=(int)(MLength*Math.sin((minute/60.0)*2*Math.PI));
		int MYIncrement=(int)(MLength*Math.cos((minute/60.0)*2*Math.PI));
		
		int HXIncrement=(int)(HLength*Math.sin((((hour%12)+(minute/60.0))/12.0)*2*Math.PI));
		int HYIncrement=(int)(HLength*Math.cos((((hour%12)+(minute/60.0))/12.0)*2*Math.PI));
		
		g.drawOval(xCenter-radius,yCenter-radius,radius*2,radius*2);
		g.setColor(Color.RED);
		g.drawLine(xCenter,yCenter,xCenter+SXIncrement,yCenter-SYIncrement);
		g.setColor(Color.BLUE);
		g.drawLine(xCenter,yCenter,xCenter+MXIncrement,yCenter-MYIncrement);
		g.setColor(Color.YELLOW);
		g.drawLine(xCenter,yCenter,xCenter+HXIncrement,yCenter-HYIncrement);
		g.setColor(Color.BLACK);
		g.drawString("-12",xCenter,yCenter-radius);
		g.drawString("-3",xCenter+radius,yCenter);
		g.drawString("-6",xCenter,yCenter+radius);
		g.drawString("-9",xCenter-radius,yCenter);
		System.out.println(""+hour+":"+minute+":"+second);
	}
}



