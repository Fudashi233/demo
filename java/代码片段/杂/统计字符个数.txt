import java.awt.Graphics;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import javax.swing.*;
public class a
{
	public static void main(String[] args)
	{
		MyFrame frame=new MyFrame();
		frame.setSize(300,400);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
}
class MyPanel extends JPanel
{
	private int[] count;
	public MyPanel()
	{
		count=null;
	}
	public MyPanel(int[] a)
	{
		count=a.clone();//////
	}
	public Dimension getPreferredSize()
	{
		return new Dimension(400,300);
	}
	protected void paintComponent(Graphics g)
	{
		if(count==null)
			return ;
		super.paintComponent(g);
		int maxHeight=this.getHeight()-100;
		int maxWidth=this.getWidth()-60;
		int maxNum=count[0];
		for(int i=0;i<count.length;i++)
			if(maxNum<count[i])
				maxNum=count[i];
		int individualWidth=(int)(maxWidth/count.length);
		g.drawLine(30,this.getHeight()-50,this.getWidth()-30,this.getHeight()-50);
		for(int i=0;i<count.length;i++)
		{
			int h=(int)( (count[i]/(double)maxNum) *maxHeight );
			g.fillRect( 30+i*individualWidth , this.getHeight()-50-h , individualWidth , h );
            g.drawString(""+(char)(i+65),30+i*individualWidth ,this.getHeight()-50-h);				
		}
	}
}
class MyFrame extends JFrame 
{
	private JTextArea text;
	private JTextField field;
	private JButton jbtCount;
	public MyFrame()
	{
		super("Windows");
		
		text=new JTextArea();
		text.setLineWrap(true);
		text.setWrapStyleWord(true);
		
		field=new JTextField(10);
		jbtCount=new JButton("Count it");
		JPanel p1=new JPanel(new FlowLayout(FlowLayout.CENTER,5,20));
		p1.add(field);
		p1.add(jbtCount);
		
		this.setLayout(new GridLayout(2,1,5,0));
		this.add(new JScrollPane(text));
		this.add(p1);
		
		field.addActionListener(
		                            new ActionListener()
									{
										public void actionPerformed(ActionEvent e)
										{
											 String st="";
											try
											{
											    File file=new File(field.getText());
											    FileInputStream input=new FileInputStream(file);
											    int ch;
											 
											    while((ch=input.read())!=-1)
											    {
												    st=st+(char)ch;
											    }
											        text.append(st);
											}
											catch(IOException ex)
											{
												System.out.println(ex);
											}
											int[] count=compute(st);
											MyPanel p=new MyPanel(count);
											JFrame frame=new JFrame();
											frame.add(p);
											frame.setSize(300,400);
											frame.setLocationRelativeTo(null);
											frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
											frame.setVisible(true);
										}
									}
		                        );
		jbtCount.addActionListener(
		                                new ActionListener()
										{
											public void actionPerformed(ActionEvent e)
											{
												String st="";
											try
											{
											    File file=new File(field.getText());
											    FileInputStream input=new FileInputStream(file);
											    int ch;
											    while((ch=input.read())!=-1)
											    {
												    st=st+(char)ch;
											    }
											        text.append(st);
										    }
											catch(IOException ex)
											{
												System.out.println(ex);
											}
											int[] count=compute(st);
											MyPanel p=new MyPanel(count);
											JFrame frame=new JFrame();
											frame.add(p);
											frame.setSize(300,400);
											frame.setLocationRelativeTo(null);
											frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
											frame.setVisible(true);
											}
										}
		                          );
	}
	public int[] compute(String st)
	{
		int[] count=new int[26];//26个字母  不区分大小写
		for(int i=0;i<st.length();i++)
		{
			char ch=st.charAt(i);
			if(ch>='A'&&ch<='Z')
				count[ch-'A']++;
			else if(ch>='a'&&ch<='z')
				count[ch-'a']++;
		}
		return count;
	}
}
