import java.lang.annotation.Target;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Annotation;
import java.lang.annotation.Documented;

import java.lang.reflect.Field;

class SQLTable 
{
	public static void main(String[] args)
	{
		SQLTable table = new SQLTable(Student.class);
		System.out.println(table.getSQL());
	}
	public Class<?> classX;
	private String tableName;
	private String tableSQL;
	public SQLTable(Class<?> classX)
	{
		this.classX = classX;
		tableName = "";
		tableSQL = "";
		setSQL();
	}
	private void setSQL()
	{
		Table table = classX.getAnnotation(Table.class);
		//如果table name中无字符内容，则已类名作为表名
		if("".equals(table.name().trim()))
			this.tableName = classX.getSimpleName();
		Field[] fields = classX.getDeclaredFields();
		for(int i=0;i<fields.length;i++)
		{
			Annotation[] annotations = fields[i].getDeclaredAnnotations();
			if(annotations.length == 0)
			{
				continue;
			}
			else if(annotations[0] instanceof SQLInteger)
			{
				SQLInteger intAnno = (SQLInteger)annotations[0];
				String columnName = intAnno.name();
				if("".equals(columnName.trim().length()))
					columnName = fields[i].getName();
				tableSQL += columnName+" INTEGER "+getConstraint(intAnno.constraint());
			}
			else if(annotations[0] instanceof SQLString)
			{
				SQLString stringAnno = (SQLString)annotations[0];
				String columnName = stringAnno.name();
				if("".equals(columnName.trim()))
				{
					columnName = fields[i].getName();
				}
				tableSQL += columnName+" VARCHAR(50) "+getConstraint(stringAnno.constraint());
			}
		}
		
	}
	private String getConstraint(Constraint constraint)
	{
		String result = "";
		if(constraint.primaryKey())
		{
			result += " PRIMARY KEY ";
		}
		if(constraint.unique())
		{
			result += " UNIQUE ";
		}
		if(!constraint.allowNull())
		{
			result += " NOT NULL";
		}
		return result+",\n";
	}
	public String getTableName()
	{
		return tableName;
	}
	public String getTableSQL()
	{
		return tableSQL;
	}
	public String getSQL()
	{
		if("".equals(tableName.trim()))
		{
			return null;
		}
		if("".equals(tableSQL.trim()))
		{
			return null;
		}
		
		return "CREATE TABLE "+tableName+" ( "+tableSQL.substring(0,tableSQL.lastIndexOf(","))+" ) ";
	}
}


@Table
class Student
{
	@SQLInteger(name = "id",constraint = @Constraint(primaryKey = true))
	int id;
	@SQLString(name = "firstName")
	String firstName;
	@SQLString(constraint = @Constraint(unique = true))
	String lastName;
	int year;
}


@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@interface Table
{
	String name() default  "";
}

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@interface Constraint
{
	boolean primaryKey() default false;
	boolean unique() default false;
	boolean allowNull() default true;
}

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@interface SQLInteger
{
	String name() default "";
	Constraint constraint() default @Constraint;
}

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@interface SQLString
{
	String name() default "";
	Constraint constraint() default @Constraint;
}