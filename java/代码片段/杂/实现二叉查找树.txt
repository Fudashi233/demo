import java.util.ArrayList;
public class Tree<T>
{
    public TNode<T> root;
	public int size;
	public Tree(T t)
	{
		this.root=new TNode<T>(t);
		this.size=1;
	}
	public Tree()
	{
		this.root=null;
		this.size=0;
	}
	public Tree(T[] object)
	{
		for(int i=0;i<object.length;i++)
			insert(new TNode<T>(object[i]));
	}
	public boolean search(TNode<T> t)
	{
		TNode<T> current=this.root;
		while(current!=null)
		{
			if(t.compareTo(current.data)<0)
			    current=current.left;
		    else if(t.compareTo(current.data)>0)
				current=current.right;
			else if(t.compareTo(current.data)==0)
				return true;
		}
		return false;
	}
	public void insert(TNode<T> t)
	{
		if(root==null)
		{
			this.root=createNewNode(t);
		}
		else
		{
			TNode<T> parent=null;
			TNode<T> current=root;
			while(current!=null)
			{
				if(t.compareTo(current.data)<0)
				{
					parent=current;
					current=current.left;
				}
				else if(t.compareTo(current.data)>0)
				{
					parent=current;
					current=current.right;
				}
				else if(t.compareTo(current.data)==0)
				{
					System.out.println("repeat");
					return ;
				}
			}
			if(t.compareTo(parent.data)<0)
				parent.left=createNewNode(t);
			else
				parent.right=createNewNode(t);
		}
		this.size++;
	}
	public TNode<T> createNewNode(TNode<T> t)
	{
		return t;
	}
	public void preOrder(TNode<T> current)
	{
		if(current!=null)
		{
			System.out.print(current.data+"\t");
		    preOrder(current.left);
		    preOrder(current.right);
		}
	}
	public void inOrder(TNode<T> current)
	{
		if(current!=null)
		{
			inOrder(current.left);
			System.out.print(current.data+"\t");
			inOrder(current.right);
		}
	}
	public void postOrder(TNode<T> current)
	{
		if(current!=null)
		{
			postOrder(current.left);
			postOrder(current.right);
			System.out.print(current.data+"\t");
		}
	}
	public int getSize()
	{
		return this.size;
	}
	public TNode<T> getRoot()//////
	{
		return this.root;
	}
    public ArrayList<T> path(TNode<T> t)
	{
		if(search(t)&&this.root!=null)
		{
			ArrayList<T> list=new ArrayList<T>();
			TNode<T> current=this.root;
			while(current!=null)
			{
				if(t.compareTo(current.data)>0)
				{
					list.add(current.data);
					current=current.right;
				}
				else if(t.compareTo(current.data)<0)
				{
					list.add(current.data);
					current=current.left;
				}
				else if(t.compareTo(current.data)==0)
				{
					list.add(current.data);
					return list;
				}
			}
		}
		return null;
	}
	public void delete(TNode<T> t)
	{
		TNode<T> parent=null;
		TNode<T> current=this.root;
		while(current!=null)
		{
			if(t.compareTo(current.data)<0)
			{
				parent=current;
				current=current.left;
			}
			else if(t.compareTo(current.data)>0)
			{
				parent=current;
				current=current.right;
			}
			else if(t.compareTo(current.data)==0)
				break;
		}
		if(current==null)
		{
			System.out.println("no tree or element");
			return ;
		}
		if(current.left==null)
		{
			if(parent==null)
				root=current.right;
			else
			{
				if(t.compareTo(parent.data)<0)
					parent.left=current.right;
				else 
					parent.right=current.right;
			}
		}
		else
		{
			TNode<T> parentOfRightMost=current;
			TNode<T> rightMost=current.left;
			while(rightMost.right!=null)        //find most;
			{
  
			    parentOfRightMost=rightMost;
				rightMost=rightMost.right;	
			}
			current.data=rightMost.data;
			if(parentOfRightMost.right==rightMost)
				parentOfRightMost.right=rightMost.left;
			else 
				parentOfRightMost.left=rightMost.left;
		}
	}
	public static void main(String[] args)
	{
		Integer[] array={60,55,100,45,57,67,107,59,101};
	    Tree<Integer> tree=new Tree<Integer>(array);
		tree.delete(new TNode<Integer>(100));
		tree.preOrder(tree.getRoot());
	} 
	
}
class TNode<T> implements Comparable<T>
{
	public T data;
	public TNode<T> left;
	public TNode<T> right;
	public TNode(T t)
	{
		data=t;
		left=null;
		right=null;
	}
	public TNode()
	{
		data=null;
		left=null;
		right=null;
	}
	public int compareTo(T t)
	{
		return ((Integer)data).intValue()-((Integer)t).intValue();
	}
}